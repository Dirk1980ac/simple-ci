#!/bin/env bash

# SPDX-License-Identifier: MIT

set -eu

GIT_DIR=$(pwd) # Git repo directory
REPONAME=$(basename "${GIT_DIR}") # Repository directory name
PROJECT="${REPONAME%.git}" # Project name

# Generate BUILD_ID
BUILD_ID="$(date -u +%Y%m%d.%H%M)"

if    [[ -z ${PROJECT} ]]; then
	echo "Missing project name in git hook!"
	exit 1
fi

# CI log directory
LOG_DIR="${HOME}/.ci/logs"
LOG_FILE="${LOG_DIR}/${PROJECT}-${BUILD_ID}.log" # Log Filename

# Lock directory to avoid concurrent Builds oh the same image
LOCK_DIR="${HOME}/.ci/lock"

# Check if log directory is available, otherwise create ist
if [[ ! -d ${LOG_DIR} ]]; then
	mkdir -p "${LOG_DIR}"
fi

# Check if lock directory is available, otherwise create ist
if [[ ! -d ${LOCK_DIR} ]]; then
	mkdir -p "${LOCK_DIR}"
fi

# shellcheck disable=SC2034
while read -r oldrev newrev ref; do
	BRANCH=${ref##refs/heads/}
	# Working directory for the build
	WORKDIR="${HOME}/.ci/build/${PROJECT}-${BRANCH}"

	# Check if Working directory is available, otherwise create ist
	if [[ -d ${WORKDIR} ]]; then
		rm -rf "${WORKDIR}"
	fi

	# Clone git dir in workdir.
	git clone --branch "${BRANCH}" "${GIT_DIR}" "${WORKDIR}"
	CFGFILE="${WORKDIR}/.simple-ci/${BRANCH}.conf"

	# Set options for build script
	script_params+=(
		--project="${PROJECT}"
		--workdir="${WORKDIR}"
		--build-id="${BUILD_ID}"
		--config "${CFGFILE}"
	)

	if [[ -f ${CFGFILE} ]]; then
		# shellcheck source=/dev/null
		source "${WORKDIR}/.simple-ci/${BRANCH}.conf"
		SCRIPT="${HOME}/.ci/scripts/ci-build" # Build script

		if [[ ! -x ${SCRIPT} ]]; then
			# Report missing build script
			echo "Builder script missing."
			exit 1
		fi

		# Start build script in a subshell
		(setsid bash "${SCRIPT}" "${script_params[@]}" < /dev/null &> "${LOG_FILE}" &) &
	else
		# If no config gile is found just delete the working directory.
		rm -rf "${WORKDIR}"
	fi
done
