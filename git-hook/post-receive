#!/bin/env bash

# SPDX-License-Identifier: MIT

set -eu

GIT_DIR=$(pwd) # Git repo directory
REPONAME=$(basename "${GIT_DIR}") # Repository directory name
PROJECT="${REPONAME%.git}" # Project name

# Generate BUILD_ID
BUILD_ID="$(date -u +%Y%m%d.%H%M)"

if    [[ -z ${PROJECT} ]]; then
	echo "Missing project name in git hook!"
	exit 1
fi

# Working directory for the build
WORKDIR="${HOME}/.ci/build/${PROJECT}"

# Initialize ${TAG} to avoid unbound variable ig not set in config file.
TAG=""

# CI log directory
LOG_DIR="${HOME}/.ci/logs"

# Lock directory to avoid concurrent Builds oh the same image
LOCK_DIR="${HOME}/.ci/lock"

# Check if log directory is available, otherwise create ist
if [[ ! -d ${LOG_DIR} ]]; then
	mkdir -p "${LOG_DIR}"
fi

# Check if lock directory is available, otherwise create ist
if [[ ! -d ${LOCK_DIR} ]]; then
	mkdir -p "${LOCK_DIR}"
fi

# shellcheck disable=SC2034
while read -r oldrev newrev ref; do
	BRANCH=${ref##refs/heads/}

	# Check if Working directory is available, otherwise create ist
	if [[ -d ${WORKDIR} ]]; then
		rm -rf "${WORKDIR}"
	fi

	# Clone git dir in workdir.
	git clone --branch "${BRANCH}" "${GIT_DIR}" "${WORKDIR}"
	cd "${WORKDIR}"
	CFGFILE="${WORKDIR}/.simple-ci/${BRANCH}.conf"

	# Set options for build script
	script_params+=(
		--project="${PROJECT}"
		--workdir="${WORKDIR}"
		--build-id="${BUILD_ID}"
		--config "${CFGFILE}"
	)

	if [[ -f ${CFGFILE} ]]; then
		# shellcheck source=/dev/null
		source "${WORKDIR}/.simple-ci/${BRANCH}.conf"
		if [[ ${PIPELINE} == "podman" ]] || [[ ${PIPELINE} == "docker" ]]; then

			SCRIPT="${HOME}/.ci/scripts/build-podman" # Build script

			if [[ ! -x ${SCRIPT} ]]; then
				# Report missing build script
				echo "Builder script missing."
				exit 1
			fi

			if [[ -z ${TAG} ]]; then
				TAG="latest"
			fi

			if [[ ! -d ${HOME}/.ci/build/locks ]]; then
				mkdir -p "${HOME}/.ci/build/locks"
			fi

			LOCK_BUILD="${LOCK_DIR}/.${PROJECT}-${TAG}-running"
			LOG_FILE="${LOG_DIR}/${PROJECT}-${TAG}-${BUILD_ID}.log" # Log Filename

			if [[ ! -f ${LOCK_BUILD} ]]; then
				# Report a started build
				echo "Build starting for '${TAG}'."

				# Start build script in a subshell
				(setsid bash "${SCRIPT}" "${script_params[@]}" < /dev/null \
					&> "${LOG_FILE}" &) &
			else
				# Report already running build if lock exists.
				echo "Build is already running. Ignoring request."
			fi
		elif [[ ${PIPELINE} == "generic" ]]; then
			SCRIPT="${HOME}/.ci/scripts/build-generic" # Build script
			LOCK_BUILD="${LOCK_DIR}/.${PROJECT}-running"
			LOG_FILE="${LOG_DIR}/${PROJECT}-${BUILD_ID}.log" # Log Filename

			if [[ ! -f ${LOCK_BUILD} ]]; then
				echo "Starting generic Build."
				(setsid bash "${SCRIPT}" "${script_params[@]}" < /dev/null \
					&> "${LOG_FILE}" &) &
				exit 1
			else
				# Report already running build if lock exists.
				echo "Build is already running. Ignoring request."
			fi
		else
			rm -rf "${WORKDIR}"
		fi
	fi
done
