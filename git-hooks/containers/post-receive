#!/bin/env bash

# SPDX-License-Identifier: MIT

set -eu

PROJECT="" # Project name

# Generate BUILD_ID
BUILD_ID="$(date -u +%Y%m%d.%H%M)"

if    [[ -z ${PROJECT} ]]; then
	echo "Missing project name in git hook!"
	exit 1
fi

WORKDIR="${HOME}/.ci/build/${PROJECT}" # Working directory
GIT_DIR="${HOME}/repos/${PROJECT}.git" # .git directory
LOCK_BUILD="${HOME}/.ci/build/locks/.${PROJECT}-running" # Lock file
LOG_DIR="${HOME}/.ci/build/logs" # Log directory
LOG_FILE="${PROJECT}-${BUILD_ID}.log" # Log Filename
SCRIPT="${HOME}/.ci/podman/build-podman" # Build script

if [[ ! -d ${LOG_DIR}   ]]; then
	mkdir -p "${LOG_DIR}"
fi

# shellcheck disable=SC2034
while read -r oldrev newrev ref; do
	# Check if script is available and executable
	if [[ -x ${SCRIPT} ]]; then

		BRANCH=${ref##refs/heads/}

		if [[ -d ${WORKDIR} ]]; then
			rm -rf "${WORKDIR}"
		fi

		# Clone git dir in workdir.
		git clone --branch "${BRANCH}" "${GIT_DIR}" "${WORKDIR}"
		cd "${WORKDIR}"

		if [[ -f ${WORKDIR}/.simple-ci/${BRANCH}/podman.conf ]]; then
			# shellcheck source=/dev/null
			source "${WORKDIR}/.simple-ci/${BRANCH}/podman.conf"

			if [[ ${#ARCHES[@]} -gt 0 ]]; then
				for arch in "${ARCHES[@]}"; do
					script_params+=(--arch "${arch}")
				done
			fi

			if [[ ${ENCRYPT} == "true" ]]; then
				script_params+=(--encrypt)
			fi

			if [[ ${SIGN} == "true" ]]; then
				script_params+=(--sign)
			fi

			if [[ ${EMBED_KEYS} == "true" ]]; then
				script_params+=(--add-ssh-keys)
			fi

			# Set options for build script
			script_params=(
				--project="${PROJECT}"
				--workdir="${WORKDIR}"
				--build-id="${BUILD_ID}"
				--upload
				-c "${WORKDIR}/.simple-ci/${BRANCH}/podman.conf"
			)

			if [[ ! -f ${LOCK_BUILD} ]]; then
				# Report a started build
				echo "${BRANCH} received. Building image."

				# Start build script in a subshell
				(setsid bash "${SCRIPT}" "${script_params[@]}" < /dev/null \
					&> "${LOG_DIR}/${LOG_FILE}" &) &
			else
				# Report already running build if lock exists.
				echo "Build is already running. Ignoring request."
			fi
		else # TODO: Implement other Builds as elif here.
			rm -rf "${WORKDIR}"
		fi
	else
		# Report missing build script
		echo "Builder script missing."
	fi
done
