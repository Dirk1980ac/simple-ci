#!/bin/env bash

# SPDX-License-Identifier: MIT

# Exit on error and on unbound variables
set -eu

# Initialize script variables because we use 'set -u' and set sane defaults.
# These variables will be overridden by the config file.
PROJECT=""
WORKDIR=""
BUILD_ID=""
CONFIG=""
CONTAINERFILE=""

help() {
	cat << EOF
Usage: $(basename "$0") [OPTIONS]

This script builds a multi-architecture Podman image or runs a generic build.
The workflow is determined by the 'PIPELINE' variable in the config file.

Options:
  -c <config_file>, --config <config_file>
      Configuration file.
  -p <project>, --project=<project>
      Sets the **project name**. This option is **mandatory**.
  -w <directory>, --workdir=<directory>
      Specifies the **working directory** where the build context is located.
      This option is **mandatory**.
  -b <id>, --build-id=<id>
      Assigns a **build ID** to the image, which can be used for versioning or tracking.
      This option is **mandatory**.
  -h, --help
      Displays this help message and exits.

Examples:
  $(basename "$0") -p myapp -w ./src -b 12345 --config myconfig.conf
EOF
	exit 1
}

# Parse command line options
if ! ARGS=$(getopt -o p:w:b:hc: --long project:,workdir:,build-id:,help,config: -n "$(basename "$0")" -- "$@"); then
	echo "Error: Failed to parse options. Please check your command." >&2
	help
fi

eval set -- "${ARGS}"

while true; do
	case "$1" in
		-p | --project)
			PROJECT=$2
			shift 2
			;;
		-w | --workdir)
			WORKDIR=$2
			shift 2
			;;
		-b | --build-id)
			BUILD_ID=$2
			shift 2
			;;
		-h | --help)
			help
			;;
		-c | --config)
			CONFIG=$2
			shift 2
			;;
		--)
			shift
			break
			;;
		*)
			echo "Internal error in option parsing!" >&2
			exit 1
			;;
	esac
done

# Show help if a mandatory option is missing
if [[ -z ${PROJECT} ]] || [[ -z ${BUILD_ID} ]] || [[ -z ${WORKDIR} ]]; then
	echo "Error: Mandatory options --project, --build-id or --workdir missing." >&2
	help
fi

cd "${WORKDIR}"

# Read configuration file
if [[ -z ${CONFIG} ]] || [[ ! -f ${CONFIG} ]]; then
	echo "Missing config file!"
	exit 1
else
	# shellcheck source=/dev/null
	source "${CONFIG}"
fi

cleanup() {
	rm -f "${LOCKFILE}"
}

trap cleanup EXIT

case "${PIPELINE}" in
	"podman" | "docker")
		# Podman/Docker Workflow
		if [[ ${UPLOAD} == "true" ]] && [[ -z ${REG_USER} ]] || [[ -z ${REG_ADDR} ]]; then
			echo "UPLOAD is true but no target is specified, disabling Upload."
			UPLOAD="false"
		fi

		if [[ -z ${TAG} ]]; then
			TAG="latest"
		fi

		LOCKFILE="${HOME}/.ci/lock/.${PROJECT}-${TAG}-running"

		if [[ ! -f ${LOCKFILE} ]]; then
			touch "${LOCKFILE}"

			if [[ -d .git-crypt ]]; then
				git --git-dir .git --work-tree . crypt unlock
			fi

			if [[ ${#ARCHES[@]} -gt 1 ]]; then
				podman manifest exists "${REG_ADDR}/${REG_USER}/${PROJECT}:${TAG}" &&
					podman manifest rm "${REG_ADDR}/${REG_USER}/${PROJECT}:${TAG}"
				podman manifest create "${REG_ADDR}/${REG_USER}/${PROJECT}:${TAG}"

				for arch in "${ARCHES[@]}"; do
					RUN_HOST=""
					podman_args=()

					if [[ ${arch} == "amd64" ]] && [[ -n ${AMD64_REMOTE} ]]; then
						RUN_HOST="${AMD64_REMOTE}"
					elif [[ ${arch} == "arm64" ]] && [[ -n ${ARM64_REMOTE} ]]; then
						RUN_HOST="${ARM64_REMOTE}"
					elif [[ ${arch} == "riscv64" ]] && [[ -n ${RISCV64_REMOTE} ]]; then
						RUN_HOST="${RISCV64_REMOTE}"
					fi

					if [[ ${EMBED_KEYS} == "true" ]] ||
						[[ ${EMBED_KEYS} == "yes" ]]; then
						podman_args+=(
							--build-arg sshkeys="$(cat "${SSH_KEYFILE}")"
						)
					fi

					if [[ -n ${RUN_HOST} ]]; then
						podman_args+=(-c "${RUN_HOST}")
					fi

					if [[ ${arch} == "riscv64" ]]; then
						podman_args+=(
							--from docker.io/dirk1980/fedora-riscv64:latest
						)
					fi

					if [[ -n ${CONTAINERFILE} ]]; then
						podman_args+=(-f "${CONTAINERFILE}")
					fi

					podman_args+=(
						--rm
						--arch "${arch}"
						--build-arg "buildid=${BUILD_ID}"
						--security-opt label=type:unconfined_t
						--pull=always
						--network host
						-t "${REG_ADDR}/${REG_USER}/${PROJECT}:${TAG}-${arch}"
						"${WORKDIR}"
					)
					podman build "${podman_args[@]}"

					if [[ -n ${RUN_HOST} ]]; then
						podman image scp \
							"${RUN_HOST}::${REG_ADDR}/${REG_USER}/${PROJECT}:${TAG}-${arch}" \
							localhost::
					fi

					podman manifest add \
						"${REG_ADDR}/${REG_USER}/${PROJECT}:${TAG}" \
						"${REG_ADDR}/${REG_USER}/${PROJECT}:${TAG}-${arch}"
				done

				for arch in "${ARCHES[@]}"; do
					podman image untag \
						"${REG_ADDR}/${REG_USER}/${PROJECT}:${TAG}-${arch}"
				done

				if [[ ${UPLOAD} == "true" ]] || [[ ${UPLOAD} == "yes" ]]; then
					push_args=(--authfile "${AUTHFILE}")
					if [[ ${ENCRYPT} == "true" ]] || [[ ${ENCRYPT} == "yes" ]]; then
						push_args+=(--encryption-key="${ENCRYPT_KEY}")
					fi
					if [[ ${SIGN} == "true" ]] || [[ ${SIGN} == "yes" ]] &&
						[[ -f ${SIGN_PRIVATE_KEY} ]] &&
						[[ -f ${SIGN_PASSWORD_FILE} ]]; then
						push_args+=(
							--sign-by-sigstore-private-key "${SIGN_PRIVATE_KEY}"
							--sign-passphrase-file "${SIGN_PASSWORD_FILE}")
					fi
					push_args+=("${REG_ADDR}/${REG_USER}/${PROJECT}:${TAG}")
					podman manifest push "${push_args[@]}"
				fi
			elif [[ ${#ARCHES[@]} -eq 1 ]]; then
				for arch in "${ARCHES[@]}"; do
					RUN_HOST=""
					podman_args=()

					if [[ ${arch} == "amd64" ]] && [[ -n ${AMD64_REMOTE} ]]; then
						RUN_HOST="${AMD64_REMOTE}"
					elif [[ ${arch} == "arm64" ]] &&
						[[ -n ${ARM64_REMOTE} ]]; then
						RUN_HOST="${ARM64_REMOTE}"
					elif [[ ${arch} == "riscv64" ]] &&
						[[ -n ${RISCV64_REMOTE} ]]; then
						RUN_HOST="${RISCV64_REMOTE}"
					fi

					if [[ -n ${RUN_HOST} ]]; then
						podman_args+=(-c "${RUN_HOST}")
					fi

					if [[ ${arch} == "riscv64" ]]; then
						podman_args+=(--from docker.io/dirk1980/fedora-riscv64:latest)
					fi

					if [[ -n ${CONTAINERFILE} ]]; then
						podman_args+=(-f "${CONTAINERFILE}")
					fi

					if [[ ${EMBED_KEYS} == "true" ]] ||
						[[ ${EMBED_KEYS} == "yes" ]]; then
						podman_args+=(--build-arg sshkeys="$(cat "${SSH_KEYFILE}")")
					fi

					podman_args+=(
						--arch "${arch}"
						--rm
						--memory 1g
						--build-arg buildid="${BUILD_ID}"
						--security-opt label=type:unconfined_t
						--pull=always
						--network host
						-t "${REG_ADDR}/${REG_USER}/${PROJECT}:${TAG}" "${WORKDIR}"
					)

					podman build "${podman_args[@]}"

					if [[ -n ${RUN_HOST} ]]; then
						podman image scp \
							"${RUN_HOST}::${REG_ADDR}/${REG_USER}/${PROJECT}:${TAG}" \
							localhost::
					fi

					if [[ ${UPLOAD} == "true" ]] || [[ ${UPLOAD} == "yes" ]]; then
						push_args=()
						if [[ ${ENCRYPT} == true ]]; then
							push_args+=(--encryption-key="${ENCRYPT_KEY}")
						fi

						if [[ ${SIGN} == "true" ]] || [[ ${SIGN} == "yes" ]] &&
							[[ -f ${SIGN_PRIVATE_KEY} ]] &&
							[[ -f ${SIGN_PASSWORD_FILE} ]]; then
							push_args+=(
								--sign-by-sigstore-private-key "${SIGN_PRIVATE_KEY}"
								--sign-passphrase-file "${SIGN_PASSWORD_FILE}")
						fi

						push_args+=(
							--authfile "${AUTHFILE}"
							"${REG_ADDR}/${REG_USER}/${PROJECT}:${TAG}"
						)
						podman push "${push_args[@]}"
					fi
				done
			fi

			if [[ -d .git-crypt ]]; then
				git --git-dir .git --work-tree . crypt lock
			fi
		fi
		;;
	"generic")
		# Generic Workflow
		LOCKFILE="${HOME}/.ci/lock/.${PROJECT}-${BRANCH}-running"

		if [[ ! -f ${LOCKFILE} ]]; then

			if [[ -d .git-crypt ]]; then
				git --git-dir .git --work-tree . crypt unlock
			fi

			for arch in "${ARCHES[@]}"; do
				RUN_HOST=""
				podman_args=()

				if [[ ${arch} == "amd64" ]] && [[ -n ${AMD64_REMOTE} ]]; then
					RUN_HOST="${AMD64_REMOTE}"
				elif [[ ${arch} == "arm64" ]] && [[ -n ${ARM64_REMOTE} ]]; then
					RUN_HOST="${ARM64_REMOTE}"
				elif [[ ${arch} == "riscv64" ]] && [[ -n ${RISCV64_REMOTE} ]]; then
					RUN_HOST="${RISCV64_REMOTE}"
				fi

				if [[ -n ${RUN_HOST} ]]; then
					podman_args+=(-c "${RUN_HOST}")
				fi

				podman_args+=(
					--rm
					--memory 1g
					--pull=always
					--arch "${arch}"
					--security-opt label=type:unconfined_t
					-v "${WORKDIR}:/workdir"
				)

				if [[ -n ${OUTPUT_DIR} ]] && [[ -n ${OUTPUT_MOUNT} ]]; then
					podman_args+=(-v "${HOME}/${OUTPUT_DIR}:${OUTPUT_MOUNT}")
				fi

				podman_args+=(
					"${RUNNER}"
				)

				if [[ -n ${BUILDSCRIPT} ]]; then
					podman_args+=(
						"${BUILDSCRIPT}"
						"${SCRIPT_ARGS}"
					)
				fi

				timeout 2h podman run "${podman_args[@]}"
			done

			if [[ -d .git-crypt ]]; then
				git --git-dir .git --work-tree . crypt lock
			fi
		fi
		;;
	*)
		echo "Error: Unknown pipeline '${PIPELINE}' specified in config file." >&2
		exit 1
		;;
esac
