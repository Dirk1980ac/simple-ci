#!/bin/env bash

# SPDX-License-Identifier: MIT

# Exit on error and on unbound variables
set -eu

# Initialize script variables because we use 'set -u' and set sane defaults.
# Do not edit these, use the cinfig file instead.
PROJECT=""
WORKDIR=""
ARCHES=()
CONFIG=""
RUN_HOST=""

# Print a hopefully useful help text.
help() {
	cat << EOF
Usage: $(basename "$0") [OPTIONS]

This script builds a multi-architecture Podman image for a specified project
and can optionally upload it, targeting either a 'stable' or 'nightly' release.

Options:
  -c <config_file>, --config <config_file>
      Configuration file.

  -p <project>, --project=<project>
      Sets the **project name**. This option is **mandatory**.

  -w <directory>, --workdir=<directory>
      Specifies the **working directory** where the build context is located.
      This option is **mandatory**.

  -b <id>, --build-id=<id>
      Assigns a **build ID** to the image, which can be used for versioning or tracking.
      This option is **mandatory**.

  -h, --help
      Displays this help message and exits.

EOF
	exit 1
}

# Parse command line options
if ! ARGS=$(getopt -o p:w:b:hc: --long project:,workdir:,build-id:,help,,config: -n "build-podman" -- "$@"); then
	echo "Error: Failed to parse options. Please check your command." >&2
	help
fi

eval set -- "${ARGS}"

while true; do
	case "$1" in
		-p | --project)
			PROJECT=$2
			shift 2
			;;
		-w | --workdir)
			WORKDIR=$2
			shift 2
			;;
		-b | --build-id)
			BUILD_ID=$2
			shift 2
			;;
		-h | --help)
			help
			;;
		-c | --config)
			CONFIG=$2
			shift 2
			;;
		--) # End of options
			shift
			break
			;;
		*)
			echo "Internal error in option parsing!" >&2
			exit 1
			;;
	esac
done

LOCKFILE="${HOME}/.ci/lock/.${PROJECT}-running"

# cleanup function
cleanup() {
	# Remove lock file
	rm -f "${LOCKFILE}"
}

# Trap for cleanup: Ensures lock file is removed even on script to error or signal.
trap cleanup EXIT

# Show help if a mandatory option is missing
if [[ -z ${PROJECT}   ]] || [[ -z ${BUILD_ID}   ]] || [[ -z ${WORKDIR}   ]]; then
	echo "Error: Mandatory options --project, --build-id or --workdir missing." >&2
	help
fi
cd "${WORKDIR}"

# Read configuration from ${HOME}/.config/ci/containers.conf if available
if [[ -z ${CONFIG} ]] || [[ ! -f ${CONFIG} ]]; then
	echo "Missing config file!"
	exit 1
else
	# shellcheck source=/dev/null
	source "${CONFIG}"
fi

if [[ ! -f ${LOCKFILE}  ]]; then
	touch "${LOCKFILE}"
	for arch in "${ARCHES[@]}"; do
		podman_args=()

		if [[ ${arch} == "amd64" ]] && [[ -n ${AMD64_REMOTE} ]]; then
			RUN_HOST="${AMD64_REMOTE}"
		elif [[ ${arch} == "arm64" ]] && [[ -n ${ARM64_REMOTE} ]]; then
			RUN_HOST="${ARM64_REMOTE}"
		elif [[ ${arch} == "riscv64" ]] && [[ -n ${RISCV64_REMOTE} ]]; then
			RUN_HOST="${RISCV64_REMOTE}"
		fi

		if [[ -n ${RUN_HOST} ]]; then
			podman_args+=(-c "${RUN_HOST}")
		fi

		podman_args+=(
			--rm
			--pull=always
			--arch "${arch}"
			--security-opt label=type:unconfined_t
			-v "${WORKDIR}:/workdir"
			-v "${OUTPUT_DIR}:/root/rpmbuild"
			"${RUNNER}"
			"${BUILDSCRIPT}"
			"${SCRIPT_ARGS}"
		)

		timeout 2h podman run "${podman_args[@]}"
	done
fi
